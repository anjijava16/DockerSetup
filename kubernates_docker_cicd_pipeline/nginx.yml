NAME:   myngix
LAST DEPLOYED: Sun Apr 12 17:00:29 2020
NAMESPACE: default
STATUS: DEPLOYED

RESOURCES:
==> v1/ClusterRole
NAME                  AGE
myngix-nginx-ingress  0s

==> v1/ClusterRoleBinding
NAME                  AGE
myngix-nginx-ingress  0s

==> v1/Deployment
NAME                                  READY  UP-TO-DATE  AVAILABLE  AGE
myngix-nginx-ingress-controller       0/1    1           0          0s
myngix-nginx-ingress-default-backend  0/1    1           0          0s

==> v1/Pod(related)
NAME                                                   READY  STATUS             RESTARTS  AGE
myngix-nginx-ingress-controller-d685f79f6-j7tpb        0/1    ContainerCreating  0         0s
myngix-nginx-ingress-default-backend-696447cb98-clh6m  0/1    ContainerCreating  0         0s

==> v1/Role
NAME                  AGE
myngix-nginx-ingress  0s

==> v1/RoleBinding
NAME                  AGE
myngix-nginx-ingress  0s

==> v1/Service
NAME                                  TYPE          CLUSTER-IP     EXTERNAL-IP  PORT(S)                     AGE
myngix-nginx-ingress-controller       LoadBalancer  10.107.86.3    <pending>    80:32265/TCP,443:30368/TCP  0s
myngix-nginx-ingress-default-backend  ClusterIP     10.106.50.170  <none>       80/TCP                      0s

==> v1/ServiceAccount
NAME                          SECRETS  AGE
myngix-nginx-ingress          1        0s
myngix-nginx-ingress-backend  1        0s


NOTES:
The nginx-ingress controller has been installed.
It may take a few minutes for the LoadBalancer IP to be available.
You can watch the status by running 'kubectl --namespace default get services -o wide -w myngix-nginx-ingress-controller'

An example Ingress that makes use of the controller:

  apiVersion: extensions/v1beta1
  kind: Ingress
  metadata:
    annotations:
      kubernetes.io/ingress.class: nginx
    name: example
    namespace: foo
  spec:
    rules:
      - host: www.example.com
        http:
          paths:
            - backend:
                serviceName: exampleService
                servicePort: 80
              path: /
    # This section is only required if TLS is to be enabled for the Ingress
    tls:
        - hosts:
            - www.example.com
          secretName: example-tls

If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:

  apiVersion: v1
  kind: Secret
  metadata:
    name: example-tls
    namespace: foo
  data:
    tls.crt: <base64 encoded cert>
    tls.key: <base64 encoded key>
  type: kubernetes.io/tls
